@*@page "/"*@
@inject AuthService authService
@inject TokenService tokenService

    <nav class="navbar navbar-expand-md navbar-dark bg-dark">
        <a class="navbar-brand" href="#">Dating App</a>

        <ul class="navbar-nav mr-auto">
            <li class="nav-item active">
                <a class="nav-link" href="#">Matches</a>
            </li>
            <li class="nav-item">
                <a class="nav-link" href="#">Lists</a>
            </li>
            <li class="nav-item">
                <a class="nav-link" href="#">Messages</a>
            </li>
            <li class="nav-item">
                <a class="nav-link" onclick="@(async () => await LogOut())">Logout</a>
            </li>
        </ul>

        @if (loggedIn)
        {
            <div class="dropdown">
                <a class="dropdown-toggle text-light">
                    Welcome User
                </a>

                <div class="dropdown-menu">
                    <a class="dropdown-item" href="#"><i class="fa fa-user"></i>Edit Profile</a>
                    <div class="dropdown-divider"></div>
                    <a class="dropdown-item" href="#"><i class="fa fa-sign-out"></i>Logout</a>
                </div>
            </div>
        }
        
    <div class="form-inline my-2 my-lg-0 justify-content-end">
        <input type="text" class="form-control mr-sm-2" placeholder="Username" bind="userName" />
        <input type="password" class="form-control mr-sm-2" placeholder="Password" bind="password" />
        <button class="btn btn-success my-2 my-sm-0" onclick="@(async () => await Login())">Login</button>
    </div>
    </nav>

@functions{

    string userName = "";
    string password = "";
    bool loggedIn = false;
    bool loginDisabled = false;

    async Task Login()
    {
        await authService.LogInAsync(new LoginUserCommand { UserName = userName, Password = password });
        userName = "";
        password = "";
        var tokenStorage = await tokenService.GetAccessToken();
        loggedIn = !string.IsNullOrWhiteSpace(tokenStorage);
    }

    async Task LogOut()
    {
        await tokenService.RemoveAccessToken();
        var tokenStorage = await tokenService.GetAccessToken();
        loggedIn = !string.IsNullOrWhiteSpace(tokenStorage);
        StateHasChanged();
    }
}

